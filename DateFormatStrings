import Foundation

struct DateFormatStrings {
    static let dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
    static let dateTimeFormat = "yyyy-MM-dd'T'HH:mm:ss"
    static let localeId = "en_US_POSIX"
    static let validDateFormat = "MM/dd/yy"
    static let validHourDateFormat = "hh:mm a"
    static let welcomeBackDateFormat = "EEEE, MMMM d"
    static let dayMonthYear = "dd/MM/yyyy"
    static let monthDayYear = "MM/dd/yyyy"
    static let taskApplicationUpdateFormat = "d MMMM"
    static let taskMeetingUpdateFormat = "d MMMM, hh:mm a"
    static let eventDateFormat = "EEE dd MMM"
    static let yearMonthDate = "yyyy-MM-dd"
    static let monthYear = "MMM yyyy"
    static let hourMinSecond = "HH:mm:ss"
    static let dateMonth = "d MMM"
    static let dateMonthYear = "d MMMM YYYY"
    static let masterClassDateFormat = "d MMM YYYY (EEE)"
}

class DateTimeUtils {
    static let MILLIS_FOR_3_HOUR = 10800
    
    static var timeStampWithThreeHours: Int {
        let timeStamp = Date().toLocalTime().addingTimeInterval(TimeInterval(MILLIS_FOR_3_HOUR)).getTimeStampFromDate() ?? 0
        return timeStamp
    }
    
    static func setupCountDown(_ startTime: String?, withDays: Bool? = false) -> String {
        guard let startDate = startTime?.toDate() else { return ""}
        
        let (daysLeft, hoursLeft, minutesLeft, secondLeft) = getDateComponents(startDate)

        var str: String {
            if withDays == true {
               return String(format:"%02i:%02i:%02i:%02i", daysLeft ?? 0 ,hoursLeft ?? 0, minutesLeft ?? 0, secondLeft ?? 0)
            } else {
               return String(format:"%02i:%02i:%02i", hoursLeft ?? 0, minutesLeft ?? 0, secondLeft ?? 0)
            }
        }
        return str
    }
    
    static func getDaysDifference(_ dateString: String?, dateFormat: String?) -> (Int?, String) {
        guard let startDate = dateString?.toDate(dateFormat)?.toLocalTime() else {
            return (nil, "")
        }
        let diffInDays = Calendar.current.dateComponents([.day], from: Date(), to: startDate).day
        
        // get Intake month from start date
        if let monthInt = Calendar.current.dateComponents([.month], from: startDate).month {
            let monthName = Calendar.current.monthSymbols[monthInt-1]
            return (diffInDays, monthName)
        }
        return (diffInDays, "")
    }
    
    static private func getDateComponents(_ startDate: Date) -> (Int?, Int?, Int?, Int?) {
        // here we set the current date
        let date = NSDate()
        let calendar = Calendar.current
        let components = calendar.dateComponents([.day, .month, .year, .hour, .minute, .second], from: date as Date)
        let currentDate = calendar.date(from: components)
        
        let userCalendar = Calendar.current

        // here we set the due date. When the timer is supposed to finish
        let competitionDateComponent = calendar.dateComponents([.day, .month, .year, .hour, .minute, .second], from: startDate as Date)

        let competitionDate = userCalendar.date(from: competitionDateComponent)

        // here we change the seconds to hours,minutes and days
        let CompetitionDayDifference = calendar.dateComponents([.day, .month, .year, .hour, .minute, .second], from: currentDate!, to: competitionDate!)

        // finally, here we set the variable to our remaining time
        let daysLeft = CompetitionDayDifference.day
        let hoursLeft = CompetitionDayDifference.hour
        let minutesLeft = CompetitionDayDifference.minute
        let secondLeft = CompetitionDayDifference.second
        
        return (daysLeft, hoursLeft, minutesLeft, secondLeft)
    }
}
