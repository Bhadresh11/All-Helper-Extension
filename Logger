
import UIKit

class Logger {
	
	enum LogEvent: String {
	   case e = "‚ÄºÔ∏è" // error
	   case d = "üí¨" // debug
	   case w = "‚ö†Ô∏è" // warning
	}

	static func log(_ any: Any?,
					filename: String = #file,
					line: Int = #line,
					column: Int = #column,
					funcName: String = #function){
		#if DEBUG
		let fileNameClean = String(filename.split(separator: "/").last ?? Substring(""))
		let logHead = LogEvent.d.rawValue + " " + Date().iso8601withFractionalSeconds + " \(fileNameClean) \(funcName):\(line)"
		print(logHead, any ?? "nil", separator: "\n", terminator: "\n***************\n")
		#endif
    }
	
    static func debugLog(_ any: Any?,
                    filename: String = #file,
                    line: Int = #line,
                    column: Int = #column,
                    funcName: String = #function){
        #if DEBUG
        let fileNameClean = String(filename.split(separator: "/").last ?? Substring(""))
        let logHead = LogEvent.d.rawValue + " " + Date().iso8601withFractionalSeconds + " \(fileNameClean) \(funcName):\(line)"
        debugPrint(logHead, any ?? "nil", separator: "\n", terminator: "\n***************\n")
        #endif
    }
	
	static func err(_ any: Any?,
					filename: String = #file,
					line: Int = #line,
					column: Int = #column,
					funcName: String = #function){
		#if DEBUG
		let fileNameClean = String(filename.split(separator: "/").last ?? Substring(""))
		let logHead = LogEvent.e.rawValue + " " + Date().iso8601withFractionalSeconds + " \(fileNameClean) \(funcName):\(line)"
		print(logHead, any ?? "nil", separator: "\n", terminator: "\n***************\n")
		#endif
    }
	
	static func warn(_ any: Any?,
					filename: String = #file,
					line: Int = #line,
					column: Int = #column,
					funcName: String = #function){
		#if DEBUG
		let fileNameClean = String(filename.split(separator: "/").last ?? Substring(""))
		let logHead = LogEvent.w.rawValue + " " + Date().iso8601withFractionalSeconds + " \(fileNameClean) \(funcName):\(line)"
		print(logHead, any ?? "nil", separator: "\n", terminator: "\n***************\n")
		#endif
    }


    
}


func print(_ items: Any..., separator: String = " ", terminator: String = "\n") {
    
	#if DEBUG
    var idx = items.startIndex
    let endIdx = items.endIndex

    repeat {
        Swift.print(items[idx], separator: separator, terminator: idx == (endIdx - 1) ? terminator : separator)
        idx += 1
    }
    while idx < endIdx
	#endif
	
}

func debugPrint(_ items: Any..., separator: String = " ", terminator: String = "\n") {
    
    #if DEBUG
    var idx = items.startIndex
    let endIdx = items.endIndex

    repeat {
        Swift.debugPrint(items[idx], separator: separator, terminator: idx == (endIdx - 1) ? terminator : separator)
        idx += 1
    }
    while idx < endIdx
    #endif
    
}

extension String {
    var iso8601withFractionalSeconds: Date? { return Formatter.iso8601withFractionalSeconds.date(from: self) }
}
extension Date {
    var iso8601withFractionalSeconds: String { return Formatter.iso8601withFractionalSeconds.string(from: self) }
}
extension Formatter {
	static var iso8601withFractionalSeconds: ISO8601DateFormatter {
		if #available(iOS 11.2, *) {
			return ISO8601DateFormatter([.withInternetDateTime, .withFractionalSeconds])
		}
		return ISO8601DateFormatter([.withInternetDateTime])
	}
}
extension ISO8601DateFormatter {
    convenience init(_ formatOptions: Options, timeZone: TimeZone? = TimeZone(identifier: "Europe/Rome")) {
        self.init()
        self.formatOptions = formatOptions
        self.timeZone = timeZone
    }
}
